#!/bin/bash
####################################
#ss://method:password@server:port
#eg:
#       aes-256-gcm:CUndSZnYsPKcu6Kj8THVMBHD@103.156.50.107:39772
#EncodeType0: json
# {
# 	"method": "xxx",
# 	"passwd": "xxx",
# 	"ip": "xxxx",
# 	"port": "xxx",
# }
#EncodeType1:
#	(method:password | base64)@server:port
#EncodeType2:
#	full_string | base64
#CMD:
#	ss-local -l $lport -s $IP -p $PORT -k $PASSWD -m $METHOD
####################################
PARAM_LIST="method passwd ip port"
CHECK_LIST="method passwd ip port"

#value_get string index
value_get(){
	echo $1 | sed 's/[:@]/ /g' | awk "{print \$$2}"
}
#decode_parse decoded_string
decode2json(){
	local name
	local value
	local count
	local context
	local String="$@"
	count=1
	#set +H
	[ -z "$String" ] && return 1
	for name in $PARAM_LIST;do
		value=`value_get "$String" $count`
		[ "$name" = "$passwd" ] && {
			context=`base64_decode "$value"` && value="$context"
		}
		eval $name="$value"
		count=$((count+1))
	done
	variables2json $PARAM_LIST
	return 0
}

decode_type0(){
	local json
	json=`echo "$@" | sed '/^ *{.*} *$/!d'`
	[ -z "$json" ] && return 1
	json=`echo "$@" | jq -c -S 'del(.name)' 2>/dev/null`
	[ -z "$json" ] && return 1
	echo "$json"
}
decode_type1(){
	local prefix
	local suffix
	local result
	prefix=`echo -n $1 | sed '/@/!d;s/@.*//'`
	suffix=`echo -n $1 | sed '/@/!d;s/.*@//'`
	[ -z "$prefix" -o -z "$suffix" ] && return 1
	result=`base64_decode "$prefix"`
	[ $? != 0 ] && return 1
	#Find ":" in result
	prefix=`echo "$result" | sed 's/.*:.*//'`
	[ -n "$prefix" ] && return 1
	decode2json "${result}@${suffix}"
	return 0
}
decode_type2(){
	local String
	String=`base64_decode "$1"`
	[ -z "$String" ] && return 1
	decode2json "${String}"
	return 0
}

#################################
#Public functions
#resource_decode resource
resource_decode(){
	local data
	data=`echo -n $1 | sed 's/#.*//;s/\/?.*//;s/ *$//'`
	[ -z "$data" ] && return 1
	decode_type0 "$data" && return 0
	decode_type1 "$data" && return 0
	decode_type2 "$data" && return 0
	#decode fail
	return 1
}
#resource_parse json
resource_parse(){
	json2variables $1
	check_variables $CHECK_LIST
}
# config_generate port config_file
config_generate(){
	lport=$1
	return 0
}
#  config4clash index
config4clash(){
	echo -n "
- name: \"PROXY_$1\"
  type: ss
  server: $ip
  port: $port
  cipher: $method
  password: \"$passwd\"
"
}

# command_start config_file
command_start(){
	echo "ss-local -l $lport -s $ip -p $port -k $passwd -m $method"
	ss-local -l $lport -s $ip -p $port -k $passwd -m $method >/dev/null 2>&1 &
	ret=$?
	_PID=$!
	return $ret
}
# command_stop
command_stop(){
	[ -n "$_PID" ] && kill ${_PID}
}

# command_run config_file
command_run(){
	nohup ss-local -l $lport -s $ip -p $port -k $passwd -m $method >/dev/null 2>&1 &
	echo "ss-local -l $lport -s $ip -p $port -k $passwd -m $method >/dev/null 2>&1"
}

